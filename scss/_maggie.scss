


// FUNCTIONS -------------------------------------------------------//
// - yea it's not just all mixins up in here


// Headings - use to easily declare an all-headings selector
// example:
// #{headings} {
//   line-height: $your-heading-line-height;
// }
@function headings() {
  @return h1,h2,h3,h4,h5,h6;
}




// MIXINS -------------------------------------------------------//
// - these are all convenience tools that should make your authored scss more concise & readable


// Clearfix - old school - more robust than the modern solutions
@mixin clearfix() {
  &:after {
    clear:both;
    content:"";display:table;
  }
  &:before {
    content:"";display:table;
  }
}


// fill a parent element - can be used on pseudo els as well
// example:
// .my-selector:before {
//   @include fill-parent(true)
// } 
@mixin fill-parent($is_pseudo: false) {
  @if $pseudo {
    content: "";
  }
  display: block;
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
}



// Fluid Container - uses the padding-bottom "hack" to create html that holds its aspect-ratio (defaults to 1X1)
// supports $childSelector arg - pass it a css selector if you want a child element to fill the fluid container 
// our most common uses for $childSelector are with iframe, img, and svg elements
@mixin fluid-container($height:1, $width:1, $childSelector:false) {
  position: relative;
  padding-bottom: ($height / $width) * 100%;
  height: 0px; 
  @if $childSelector {
    #{$childSelector} { 
      @include fill-parent();
      @content; 
    }
  }
}


// remove default browser styling from buttons
@mixin btn-reset() {
  appearance:none; border:none; background: none; 
  outline:none; padding:0; margin:0; border-radius:0;
}

 
// enable font smoothing
@mixin font-smoothing() {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}


// Placeholder - style input placeholder text
@mixin placeholder {
  &::-webkit-input-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &:-moz-placeholder { @content; }
}


// A11y text, hide text from view, but still allow it
// to be readable by screen readers
@mixin sr-only() {
  position: absolute !important;
  height: 1px; width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
}

 
// GLOBAL VARS -------------------------------------------------------//
// - becuase sometimes they are more clean/readable than a mixin, these can all be overriden

// transition timing cubic-bezier functions, credit to the bourbon scss lib by thoughtbot
$ease-in-quad: cubic-bezier(0.550,  0.085, 0.680, 0.530);
$ease-in-cubic: cubic-bezier(0.550,  0.055, 0.675, 0.190);
$ease-in-quart: cubic-bezier(0.895,  0.030, 0.685, 0.220);
$ease-in-quint: cubic-bezier(0.755,  0.050, 0.855, 0.060);
$ease-in-sine: cubic-bezier(0.470,  0.000, 0.745, 0.715);
$ease-in-expo: cubic-bezier(0.950,  0.050, 0.795, 0.035);
$ease-in-circ: cubic-bezier(0.600,  0.040, 0.980, 0.335);
$ease-in-back: cubic-bezier(0.600, -0.280, 0.735, 0.045);
$ease-out-quad: cubic-bezier(0.250,  0.460, 0.450, 0.940);
$ease-out-cubic: cubic-bezier(0.215,  0.610, 0.355, 1.000);
$ease-out-quart: cubic-bezier(0.165,  0.840, 0.440, 1.000);
$ease-out-quint: cubic-bezier(0.230,  1.000, 0.320, 1.000);
$ease-out-sine: cubic-bezier(0.390,  0.575, 0.565, 1.000);
$ease-out-expo: cubic-bezier(0.190,  1.000, 0.220, 1.000);
$ease-out-circ: cubic-bezier(0.075,  0.820, 0.165, 1.000);
$ease-out-back: cubic-bezier(0.175,  0.885, 0.320, 1.275);
$ease-in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);
$ease-in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);
$ease-in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000);
$ease-in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000);
$ease-in-out-sine: cubic-bezier(0.445,  0.050, 0.550, 0.950);
$ease-in-out-expo: cubic-bezier(1.000,  0.000, 0.000, 1.000);
$ease-in-out-circ: cubic-bezier(0.785,  0.135, 0.150, 0.860);
$ease-in-out-back: cubic-bezier(0.680, -0.550, 0.265, 1.550);